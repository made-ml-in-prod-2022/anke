Описание: использован датасет  https://www.kaggle.com/datasets/cherngs/heart-disease-cleveland-uci , он лежит в data/raw и обрабатывается с помощью класса Dataset по адресу data/Data.py,  обработка включает в себя удаление скоррелированных фич, ohe-hot encoding, нормализацию непрерывных фич, splitting, причем все, кроме one-hot можно настраивать через конфиг(можно не нормировать, или не удалять, или удалить половину).  Есть также опция препроцессинга через трансформер, но она не настраиваемая. Также можно сделать pca через конфиг(или по дефолту в config_2), см. README.

Можно запускать одну из трех моделей: Random forest, Decision Tree или Logistic Regression. Модели живут в классе Model по пути models/Train.py (простите за названия). Тренировка, инференс, сохранение и загрузка происходят через этот класс.
Все вместе собирается в файле run_pipeline.py.

Критерии:
0. В описании к пулл реквесту описаны основные "архитектурные" и тактические решения (1 балл)
1. В пулл-реквесте проведена самооценка (1 балл)
2. Выполнено EDA(см. notebooks) (1 балл)
3. Написана функция/класс для тренировки модели, вызов оформлен как утилита командной строки, записана в readme инструкцию по запуску(3 балла)
4. Написана функция/класс predict (вызов оформлен как утилита командной строки), которая примет на вход артефакт/ы от обучения, тестовую выборку (без меток) и запишет предикт по заданному пути, инструкция по вызову записана в readme (3 балла)
5. Проект имеет модульную структуру (2 балла)
6. Использованы логгеры(см. run_pipeline.py) (2 балла)
7. Написаны тесты на отдельные модули и на прогон обучения и predict(см tests/) (3 балла)
8. Для тестов генерируются синтетические данные, приближенные к реальным(см. data/fake_data.py) (2 балла)
9. Обучение модели конфигурируется с помощью конфигов в json или yaml, закоммитьте как минимум 2 корректные конфигурации(см. configs/) (3 балла)
10. Используются датаклассы для сущностей из конфига, а не голые dict(см. params/) (2 балла)
11. Напишите кастомный трансформер и протестируйте его(см. data/Data и tests/data_tests) (3 балла)
12. В проекте зафиксированы все зависимости(см. requirements.txt) (1 балл)
13. Настроен CI для прогона тестов, линтера на основе github actions( pytest + pylint, cм .github/workflows) (3 балла).

Дополнительные баллы=)

Используйте hydra для конфигурирования(cм. run_pipeline) - 3 балла
mlflow нет(
итого 33 * 0.6